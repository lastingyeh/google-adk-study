# 宣告虛擬目標，這些目標不對應實際檔案
.PHONY: help setup dev test clean demo check-node create-sample-files clean-samples about

# 顯示幫助資訊，列出所有可用的指令
help:
	@echo "教學 16：MCP 整合 - 可用指令："
	@echo "  make setup             - 安裝相依套件並設定環境"
	@echo "  make dev               - 啟動 ADK 開發伺服器"
	@echo "  make test              - 執行所有測試"
	@echo "  make demo              - 顯示示範提示和使用範例"
	@echo "  make about             - 顯示詳細的代理程式功能"
	@echo "  make create-sample-files - 建立測試用的範例檔案"
	@echo "  make clean-samples     - 移除範例檔案目錄"
	@echo "  make clean             - 移除快取檔案和建置工件"
	@echo "  make check-node        - 驗證 Node.js 和 npx 是否已安裝"

# 設定環境，依賴於 check-node 目標
setup: check-node
	@echo "設定教學 16：MCP 整合..."
	pip install -r requirements.txt  # 安裝 Python 相依套件
	pip install -e .                 # 以開發模式安裝當前專案
	@echo ""
	@echo "✅ 設定完成！"
	@echo ""
	@echo "下一步："
	@echo "  1. 複製 mcp_agent/.env.example 至 mcp_agent/.env"
	@echo "  2. 將您的 GOOGLE_API_KEY 新增到 mcp_agent/.env"
	@echo "  3. 執行 'make dev' 啟動 ADK 伺服器"
	@echo "  4. 在瀏覽器中開啟 http://localhost:8000"

# 檢查 Node.js 和 npx 是否已安裝
check-node:
	@echo "檢查 Node.js 和 npx 安裝狀態..."
	# 檢查 node 指令是否存在，若不存在則顯示錯誤訊息並結束
	@command -v node >/dev/null 2>&1 || { echo "❌ 錯誤：找不到 Node.js。請從 https://nodejs.org/ 安裝"; exit 1; }
	# 檢查 npx 指令是否存在，若不存在則顯示錯誤訊息並結束
	@command -v npx >/dev/null 2>&1 || { echo "❌ 錯誤：找不到 npx。請從 https://nodejs.org/ 安裝 Node.js"; exit 1; }
	@echo "✅ Node.js：$$(node --version)"
	@echo "✅ npx：$$(npx --version)"

# 啟動開發伺服器
dev:
	@echo "╔═══════════════════════════════════════════════════════════════╗"
	@echo "║         啟動 MCP 檔案系統代理程式 - ADK 伺服器                          ║"
	@echo "╚═══════════════════════════════════════════════════════════════╝"
	@echo ""
	@echo "🚀 伺服器將啟動於：http://localhost:8000"
	@echo ""
	@echo "📂 檔案組織範例（試試這些提示）："
	@echo ""
	@echo "1. 基本組織："
	@echo "   '按檔案類型組織 sample_files 目錄'"
	@echo "   '為程式碼、文件和設定檔建立資料夾'"
	@echo "   '將所有 .txt 檔案移動到文件資料夾'"
	@echo ""
	@echo "2. 專案結構："
	@echo "   '建立標準的 Python 專案結構'"
	@echo "   '將檔案組織到 src/、tests/ 和 docs/ 資料夾'"
	@echo "   '設定包含 public/、src/ 和 config/ 資料夾的網頁專案'"
	@echo ""
	@echo "3. 內容導向組織："
	@echo "   '將所有 Python 檔案群組到程式碼資料夾'"
	@echo "   '將所有設定檔移到 config 目錄'"
	@echo "   '將 markdown 檔案組織到文件資料夾'"
	@echo ""
	@echo "4. 進階組織："
	@echo "   '按修改日期將檔案分類到年度資料夾'"
	@echo "   '建立備份資料夾並移動舊檔案'"
	@echo "   '按檔案大小組織（小、中、大）'"
	@echo ""
	@echo "5. 清理操作："
	@echo "   '移除所有暫存檔案（*.tmp、*.bak）'"
	@echo "   '合併重複檔案'"
	@echo "   '將舊日誌檔案封存到壓縮資料夾'"
	@echo ""
	@echo "💡 檔案組織技巧："
	@echo "  • 代理程式可以自動建立資料夾"
	@echo "  • 使用自然語言如「按類型分組」或「按日期排序」"
	@echo "  • 代理程式會在執行前說明動作"
	@echo "  • 首先試試「make create-sample-files」來建立測試資料"
	@echo ""
	@echo "🎯 快速測試指令："
	@echo "  make create-sample-files    # 建立測試檔案來組織"
	@echo "  make demo                   # 查看所有可用提示"
	@echo "  make about                  # 完整代理程式功能"
	@echo ""
	@echo "啟動伺服器..."
	@echo ""
	@adk web  # 啟動 ADK 網頁伺服器

# 執行測試
test:
	@echo "執行教學 16 的測試..."
	@echo ""
	# 設定環境變數並執行 pytest 測試
	SKIP_MCP_INTEGRATION=false pytest tests/ -v
	@echo ""
	@echo "✅ 所有測試通過！"

# 顯示示範指令和提示
demo:
	@echo "╔═══════════════════════════════════════════════════════════════╗"
	@echo "║         教學 16：MCP 整合 - 示範提示                                   ║"
	@echo "╚═══════════════════════════════════════════════════════════════╝"
	@echo ""
	@echo "🚀 快速開始："
	@echo "  1. make setup              # 安裝相依套件"
	@echo "  2. make create-sample-files # 建立測試檔案（可選）"
	@echo "  3. make dev                # 啟動 ADK 伺服器"
	@echo "  4. 開啟 http://localhost:8000"
	@echo ""
	@echo "📝 示範提示（在 ADK UI 中試試這些）："
	@echo ""
	@echo "1. 列出檔案："
	@echo "   '列出目前目錄中的所有檔案'"
	@echo "   '顯示此專案中的所有 Python 檔案'"
	@echo ""
	@echo "2. 讀取檔案："
	@echo "   '讀取 README.md 的內容'"
	@echo "   'requirements.txt 檔案裡有什麼？'"
	@echo ""
	@echo "3. 建立檔案："
	@echo "   '建立一個名為 test.txt 的新檔案，內容為：Hello MCP！'"
	@echo "   '寫一個列印目前日期的 Python 腳本'"
	@echo ""
	@echo "4. 檔案搜尋："
	@echo "   '搜尋所有包含 TODO 的 Python 檔案'"
	@echo "   '找出此目錄中的所有 markdown 檔案'"
	@echo ""
	@echo "5. 檔案資訊："
	@echo "   'requirements.txt 的大小和最後修改日期是什麼？'"
	@echo "   '給我 Makefile 的詳細資訊'"
	@echo ""
	@echo "6. 檔案組織："
	@echo "   '按檔案類型組織 sample_files/mixed_content 資料夾'"
	@echo "   '為程式碼、文件和設定檔建立資料夾'"
	@echo "   '將所有 .txt 檔案移到文件資料夾'"
	@echo ""
	@echo "7. 進階操作："
	@echo "   '建立包含 src、tests 和 docs 資料夾的專案結構'"
	@echo "   '分析所有 Python 檔案並列出其主要功能'"
	@echo "   '產生此目錄中所有 markdown 檔案的摘要'"
	@echo ""
	@echo "💡 技巧："
	@echo "  - MCP 伺服器自動連接到檔案系統"
	@echo "  - 代理程式可以讀取、寫入、移動和組織檔案"
	@echo "  - 使用自然語言進行檔案操作"
	@echo "  - 代理程式會在執行前說明動作"
	@echo "  - 試試「make about」來了解詳細功能"
	@echo ""
	@echo "📚 了解更多："
	@echo "  - 教學：docs/tutorial/16_mcp_integration.md"
	@echo "  - MCP 規格：https://spec.modelcontextprotocol.io/"
	@echo "  - 官方伺服器：https://github.com/modelcontextprotocol/servers"
	@echo ""
	@echo "🎓 指令："
	@echo "  make about              - 顯示完整代理程式功能"
	@echo "  make create-sample-files - 建立測試檔案來組織"
	@echo "  make clean-samples      - 移除範例檔案"

# 顯示詳細的代理程式功能說明
about:
	@echo "╔═══════════════════════════════════════════════════════════════╗"
	@echo "║     MCP 檔案系統代理程式 - 功能與特色                                   ║"
	@echo "╚═══════════════════════════════════════════════════════════════╝"
	@echo ""
	@echo "🤖 代理程式概述："
	@echo "  此 AI 代理程式透過模型上下文協定（MCP）具有直接檔案系統存取能力，"
	@echo "  能夠使用自然語言指令執行檔案操作。不需要手動檔案處理！"
	@echo ""
	@echo "📂 核心功能："
	@echo ""
	@echo "  1. 檔案讀取："
	@echo "     • 讀取文字檔案（程式碼、文件、設定）"
	@echo "     • 讀取媒體檔案（圖片、PDF - 中繼資料）"
	@echo "     • 智慧編碼偵測"
	@echo "     範例：'讀取 config.json 的內容'"
	@echo ""
	@echo "  2. 檔案寫入："
	@echo "     • 建立包含內容的新檔案"
	@echo "     • 更新現有檔案"
	@echo "     • 自動建立目錄"
	@echo "     範例：'建立一個列印 hello world 的 Python 腳本'"
	@echo ""
	@echo "  3. 目錄操作："
	@echo "     • 列出目錄內容"
	@echo "     • 建立巢狀目錄"
	@echo "     • 遞迴目錄掃描"
	@echo "     範例：'列出此目錄中的所有 Python 檔案'"
	@echo ""
	@echo "  4. 檔案管理："
	@echo "     • 移動/重新命名檔案"
	@echo "     • 複製檔案（透過讀取 + 寫入）"
	@echo "     • 取得檔案中繼資料（大小、日期、權限）"
	@echo "     範例：'將所有 .txt 檔案移到 docs 資料夾'"
	@echo ""
	@echo "  5. 搜尋與探索："
	@echo "     • 按模式搜尋檔案（glob）"
	@echo "     • 按內容尋找檔案（grep）"
	@echo "     • 按檔案類型或副檔名篩選"
	@echo "     範例：'在 Python 檔案中尋找所有 TODO 註解'"
	@echo ""
	@echo "  6. 檔案組織："
	@echo "     • 按類型自動組織檔案"
	@echo "     • 建立結構化目錄"
	@echo "     • 批次重新命名操作"
	@echo "     範例：'將這些檔案按類型組織到資料夾中'"
	@echo ""
	@echo "🎯 使用案例："
	@echo "  • 程式碼產生和檔案建立"
	@echo "  • 專案架構搭建和設定"
	@echo "  • 檔案組織和清理"
	@echo "  • 文件產生"
	@echo "  • 設定檔管理"
	@echo "  • 建置工件組織"
	@echo "  • 日誌檔案分析"
	@echo ""
	@echo "🔒 安全功能："
	@echo "  • 限定在特定目錄範圍內（無系統存取權）"
	@echo "  • 代理程式會在執行前說明動作"
	@echo "  • 可使用唯讀模式"
	@echo "  • 破壞性操作需要使用者確認"
	@echo ""
	@echo "⚡ 效能："
	@echo "  • 使用 async/await 進行非阻塞操作"
	@echo "  • MCP 初始化 30 秒逾時"
	@echo "  • 大檔案高效串流"
	@echo "  • 連線池化和重複使用"
	@echo ""
	@echo "🚀 立即試用："
	@echo "  make create-sample-files  # 建立測試檔案"
	@echo "  make dev                  # 啟動代理程式"
	@echo "  然後詢問：'按檔案類型組織 sample_files 目錄'"
	@echo ""

# 建立範例檔案供測試使用
create-sample-files:
	@echo "建立測試用範例檔案..."
	@mkdir -p sample_files  # 建立主要範例目錄
	@# 建立文字文件
	@echo "這是一個範例文字文件。\n您可以要求代理程式讀取或組織此檔案。" > sample_files/document1.txt
	@echo "另一個包含不同內容的文字檔案。\n對測試檔案操作很有用。" > sample_files/notes.txt
	@echo "2025-10-10 會議記錄\n- 討論了 MCP 整合\n- 審查了檔案操作" > sample_files/meeting_notes.txt
	@# 建立程式碼檔案
	@echo "def hello_world():\n    print('Hello from MCP!')\n\nif __name__ == '__main__':\n    hello_world()" > sample_files/script.py
	@echo "function greet(name) {\n    return \`Hello, \$${name}!\`;\n}\n\nconsole.log(greet('MCP'));" > sample_files/app.js
	@echo "package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, MCP!\")\n}" > sample_files/main.go
	@# 建立設定檔
	@echo "{\n  \"name\": \"sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"用於 MCP 測試的範例專案\"\n}" > sample_files/package.json
	@echo "debug = true\nport = 8080\nhost = localhost\n\n[database]\nurl = postgres://localhost/db" > sample_files/config.toml
	@echo "# 範例 YAML 設定\napp_name: MCP Demo\nenvironment: development\nfeatures:\n  - file_operations\n  - organization\n" > sample_files/settings.yaml
	@# 建立 markdown 檔案
	@echo "# 專案 README\n\n這是用於測試 MCP 檔案操作的範例專案。\n\n## 功能\n- 檔案讀取\n- 檔案寫入\n- 組織" > sample_files/README.md
	@echo "# 待辦清單\n\n- [ ] 按類型組織檔案\n- [ ] 建立資料夾結構\n- [x] 測試 MCP 代理程式\n" > sample_files/TODO.md
	@# 建立 CSV 和資料檔案
	@echo "name,age,city\nAlice,30,NYC\nBob,25,SF\nCharlie,35,LA" > sample_files/data.csv
	@echo "{\n  \"users\": [\n    {\"id\": 1, \"name\": \"Alice\"},\n    {\"id\": 2, \"name\": \"Bob\"}\n  ]\n}" > sample_files/users.json
	@# 建立混亂的檔案供組織
	@mkdir -p sample_files/mixed_content
	@echo "隨機檔案 1" > sample_files/mixed_content/file1.txt
	@echo "console.log('test');" > sample_files/mixed_content/test.js
	@echo "# 筆記" > sample_files/mixed_content/notes.md
	@echo "x = 42" > sample_files/mixed_content/calc.py
	@echo "key=value" > sample_files/mixed_content/config.env
	@echo ""
	@echo "✅ 範例檔案建立成功！"
	@echo ""
	@echo "📂 建立的結構："
	@echo "  sample_files/"
	@echo "    ├── 文字檔案：document1.txt, notes.txt, meeting_notes.txt"
	@echo "    ├── 程式碼檔案：script.py, app.js, main.go"
	@echo "    ├── 設定檔：package.json, config.toml, settings.yaml"
	@echo "    ├── 文件：README.md, TODO.md"
	@echo "    ├── 資料檔案：data.csv, users.json"
	@echo "    └── mixed_content/（未排序的檔案供組織）"
	@echo ""
	@echo "🎯 與代理程式試試這些提示："
	@echo "  • '列出 sample_files 目錄中的所有檔案'"
	@echo "  • '讀取 README.md 的內容'"
	@echo "  • '按檔案類型組織 mixed_content 資料夾'"
	@echo "  • '在 sample_files 中尋找所有 Python 檔案'"
	@echo "  • '建立所有文字文件的摘要'"
	@echo "  • '將所有設定檔移到新的 config/ 資料夾'"
	@echo ""

# 清理範例檔案
clean-samples:
	@echo "移除範例檔案..."
	@rm -rf sample_files  # 遞迴刪除整個 sample_files 目錄
	@echo "✅ 範例檔案已移除！"

# 清理建置工件和快取
clean:
	@echo "清理建置工件和快取..."
	# 尋找並刪除 Python 快取目錄
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	# 尋找並刪除 Python 套件資訊目錄
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	# 尋找並刪除 pytest 快取目錄
	find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	# 刪除編譯的 Python 檔案
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@echo "✅ 清理完成！"
	@echo ""
	@echo "💡 若要同時移除範例檔案，請執行：make clean-samples"